# Makefile.core
# Created: Tue, Jul 16, 2024 at 11:43:13 AM
# Purpose:
# 	Contains the core libraries.

ifeq ($(USE_SUDO),true)
  SUDO := sudo
else
  SUDO :=
endif

# 	The stub prefix is intentional to avoid the warning for Makefile, which
# 	wants to avoid having a similar target.
STUB_LIBS :=  \
	stubs/config \
	stubs/list \
	stubs/logger \
	stubs/logger-factory \
	stubs/plist-buddy \
	stubs/string \
	stubs/string-builder \
	stubs/spot-test \
	stubs/user

# 	config

# Needs to be ordered because the use script will compile dependent scripts.
# Transitive scripts need to be compiled first before it can be referenced by
# another library.
CORE_LIBS :=  \
	logger-factory \
	decorator \
	simple-test \
	unit-test \
	list \
	string \
	regex \
	regex-pattern \
	map \
	date-time \
	plutil \
	config \
	emoji \
	switch \
	clipboard \
	speech \
	dialog \
	file \
	idler \
	keyboard \
	lov \
	plist-buddy \
	process \
	retry \
	string-builder \
	stack \
	system-events \
	ui-util \
	unicodes \
	window \
	logger \
	property-list \
	spot-test \
	menu \
	math \
	speech-recognition-server


APPS_PATH=/Applications/AppleScript

_init:
ifeq ($(DEPLOY_TYPE), user)
	mkdir -p ~/Library/Script\ Libraries/core
	mkdir -p ~/Applications/AppleScript/Stay\ Open/
else
	$(SUDO) mkdir -p /Library/Script\ Libraries/core
	$(SUDO) mkdir -p /Applications/AppleScript/Stay\ Open/
endif
	mkdir -p ~/applescript-core/sounds/
	mkdir -p ~/applescript-core/logs/
	cp -n config-default.template ~/applescript-core/config-default.plist || true
	cp -n config-emoji.template ~/applescript-core/config-emoji.plist || true
	cp -n plist.template ~/applescript-core/config-lib-factory.plist || true
	cp -n plist.template ~/applescript-core/lov.plist || true
	cp -n plist.template ~/applescript-core/config-system.plist || true
	cp -n plist.template ~/applescript-core/session.plist || true
	cp -n plist.template ~/applescript-core/switches.plist || true
	cp -n plist.template ~/applescript-core/config-user.plist || true
	cp -n plist.template ~/applescript-core/config-business.plist || true
	cp -n notification-app-id-name.plist ~/applescript-core/notification-app-id-name.plist || true
	cp -a assets/sounds/. ~/applescript-core/sounds/
# 	./scripts/build-bundle.sh 'core/Text Utilities'
	plutil -replace 'Project applescript-core' -string "`pwd`" ~/applescript-core/config-system.plist

clean:
	find . -name '*.scpt' ! -name "main.scpt" -delete

install: _init build
ifeq ($(DEPLOY_TYPE), user)
	mkdir -p ~/Library/'Script Libraries'/core/test
	mkdir -p ~/Library/'Script Libraries'/core/app
else
	$(SUDO) mkdir -p /Library/'Script Libraries'/core/test
	$(SUDO) mkdir -p /Library/'Script Libraries'/core/app
endif
	touch ~/applescript-core/logs/applescript-core.log
#	osascript scripts/setup-applescript-core-project-path.applescript
	./scripts/setup-switches.sh
	@echo "Installation done"

$(STUB_LIBS): Makefile
# 	osacompile -o "$(HOME)/Library/Script Libraries/core/$(patsubst stubs/%,%,$@).scpt" "scripts/stub.applescript"
	$(SUDO) osacompile -o "$(SCRIPT_LIBRARY_PATH)/core/$(patsubst stubs/%,%,$@).scpt" "scripts/stub.applescript"

$(CORE_LIBS): Makefile
	$(SUDO) ./scripts/build-lib.sh core/$@


build-standard:
ifeq ($(OS_NAME), sonoma)
	$(SUDO) ./scripts/build-lib.sh macOS-version/14-sonoma/std

else ifeq ($(OS_NAME), ventura)
	$(SUDO) ./scripts/build-lib.sh macOS-version/13-ventura/std

else ifeq ($(OS_NAME), monterey)
	$(SUDO) ./scripts/build-lib.sh macOS-version/12-monterey/std

else
	$(SUDO) ./scripts/build-lib.sh macOS-version/12-monterey/std
	@echo "build-core unimplemented macOS version error"
endif

build-core-bundle:
	$(SUDO) ./scripts/build-bundle.sh 'core/Text Utilities'
	@echo "Core Bundle compiled."


# There are circular dependency issue that needs to be considered. You may need
# to re-order the build of the script depending on which script is needed first.

build: \
	build-stub \
	build-standard \
	build-core-bundle \
	build-core \
	build-control-center \
	build-user

build-extras: \
	build-counter \
	build-redis \
	build-terminal


build-all: \
	build \
	build-extras \
	build-macos-apps

install-all: build-all

build-stub: $(STUB_LIBS)
	@echo "Stubs compiled. This target is meant to help compile other scripts. \
Make sure this is not the last target you run, otherwise the scripts that \
need the real library will fail."

build-core: $(CORE_LIBS)
	@echo "Core libraries compiled."


build-lib:
	$(SUDO) ./scripts/build-lib.sh $(SOURCE)

build-bundle:
	$(SUDO) ./scripts/build-bundle.sh $(SOURCE)


reveal-scripts:  # Reveal the deployed scripts.
	open ~/Library/Script\ Libraries


build-apps: \
	build-automator \
	build-calendar \
	build-console \
	install-control-center \
	build-dock \
	build-finder \
	build-notification-center \
	build-preview \
	install-safari \
	build-system-settings \
	build-terminal


# macOS Version-Specific Apps -------------------------------------------------


build-control-center:
	$(SUDO) osacompile -o "$(SCRIPT_LIBRARY_PATH)/core/control-center.scpt" "scripts/stub.applescript"
ifeq ($(OS_NAME), sonoma)
# 	$(SUDO) osacompile -o "$(HOME)/Library/Script Libraries/core/control-center.scpt" "scripts/stub.applescript"
	$(SUDO) ./scripts/build-lib.sh "macOS-version/14-sonoma/control-center_network"
	$(SUDO) ./scripts/build-lib.sh "macOS-version/14-sonoma/control-center_sound"
	$(SUDO) ./scripts/build-lib.sh "macOS-version/14-sonoma/control-center_focus"
	$(SUDO) ./scripts/build-lib.sh "macOS-version/14-sonoma/control-center_bluetooth"
	$(SUDO) ./scripts/build-lib.sh "macOS-version/14-sonoma/control-center_wifi"
	$(SUDO) ./scripts/build-lib.sh "macOS-version/14-sonoma/control-center"

else ifeq ($(OS_NAME), ventura)
	$(SUDO) ./scripts/build-lib.sh "macOS-version/13-ventura/control-center_network"
	$(SUDO) ./scripts/build-lib.sh "macOS-version/13-ventura/control-center_sound"
	$(SUDO) ./scripts/build-lib.sh "macOS-version/13-ventura/control-center_focus"
	$(SUDO) ./scripts/build-lib.sh "macOS-version/13-ventura/control-center"

else ifeq ($(OS_NAME), monterey)
	$(SUDO) ./scripts/build-lib.sh "macOS-version/12-monterey/control-center"

else
	$(SUDO) ./scripts/build-lib.sh "macOS-version/12-monterey/control-center"
	@echo "Unsupported macOS version for control-center"
endif

install-control-center: build-control-center


build-dock:
	$(SUDO) ./scripts/build-lib.sh "macOS-version/14-sonoma/dock"


build-notification-center:
	$(SUDO) osacompile -o "$(SCRIPT_LIBRARY_PATH)/core/notification-center.scpt" "scripts/stub.applescript"

ifeq ($(OS_NAME), sonoma)
	$(SUDO) ./scripts/build-lib.sh "macOS-version/14-sonoma/notification-center-helper"
	$(SUDO) ./scripts/build-lib.sh "macOS-version/14-sonoma/notification-center"

else ifeq ($(OS_NAME), ventura)
	$(SUDO) ./scripts/build-lib.sh "macOS-version/13-ventura/notification-center-helper"
	$(SUDO) ./scripts/build-lib.sh "macOS-version/13-ventura/notification-center"

else ifeq ($(OS_NAME), monterey)
	$(SUDO) ./scripts/build-lib.sh "macOS-version/12-monterey/notification-center-helper"
	$(SUDO) ./scripts/build-lib.sh "macOS-version/12-monterey/notification-center"

else
	$(SUDO) ./scripts/build-lib.sh "macOS-version/12-monterey/notification-center-helper"
	$(SUDO) ./scripts/build-lib.sh "macOS-version/12-monterey/notification-center"
	@echo "Unsupported macOS version for notification-center"
endif


build-user:
	$(SUDO) ./scripts/build-lib.sh libs/user/user


# Directory containing the files
DECORATORS_PATH = ./core/decorators

# Get all the .txt files in the directory
DECORATORS = $(wildcard $(DECORATORS_PATH)/dec-*.applescript)

build-decorators:
	@for file in $(DECORATORS); do \
		no_ext=$${file%.applescript}; \
		echo "Building $$file"; \
		$(SUDO) ./scripts/build-lib.sh "$$no_ext"; \
	done
	@echo "Done building core decorators"


# Library Decorators
install-dvorak:
	$(SUDO) ./scripts/build-lib.sh core/decorators/dec-keyboard-dvorak-cmd
	$(SUDO) ./scripts/build-lib.sh core/keyboard
	$(SUDO) ./scripts/factory-insert.sh KeyboardInstance core/dec-keyboard-dvorak-cmd
